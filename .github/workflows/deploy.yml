name: Push Docker Image and build

on:
  push:
    tags:
      - "dev-*"
      - "prod-*"

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    environment: docker
    outputs:
      tag: ${{ steps.extract_tag.outputs.TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract tag version
        id: extract_tag
        run: |
          echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ksc036/blog-backend:${{ env.TAG }}
            ksc036/blog-backend:latest
  gitops-update:
    runs-on: ubuntu-latest
    environment: git
    needs: docker-build-and-push
    outputs:
      dir: ${{ steps.set-envdir.outputs.env_dir }}
    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v3
        with:
          repository: ksc036/gitops-repo
          token: ${{ secrets.GITOPS_TOKEN }}
      - name: Set Variables from Tag
        id: set-envdir
        env:
          GIT_TAG: ${{ needs.docker-build-and-push.outputs.tag }}
        run: |
          echo "${GIT_TAG} ================ message here ====================="
          if [[ "$GIT_TAG" =~ ^dev-v ]]; then
            echo "ENV_DIR=dev" >> $GITHUB_ENV
            echo "env_dir=dev" >> $GITHUB_OUTPUT
            echo "APP_VERSION=${GIT_TAG#dev-}" >> $GITHUB_ENV
          elif [[ "${GIT_TAG}" =~ ^prod-v* ]]; then
            echo "ENV_DIR=prod" >> $GITHUB_ENV
            echo "env_dir=prod" >> $GITHUB_OUTPUT
            echo "APP_VERSION=${GIT_TAG#prod-}" >> $GITHUB_ENV
          else
            echo "Invalid tag format"; exit 1
          fi

      - name: Update values.yaml
        run: |
          sed -i "s/\(image: .*:\).*/\1${GIT_TAG}/" namespaces/${ENV_DIR}/bolg/be/deployment.yaml

      - name: Commit and Push to GitOps Repo
        run: |
          cd gitops
          git config user.name "github-actions"
          git config user.email "ksc036@gmail.com"
          git commit -am "Update ${ENV_DIR} to ${GIT_TAG}"
          git push
  argocd-deploy:
    runs-on: ubuntu-latest
    needs: gitops-update
    environment: argocd
    steps:
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to Argo CD
        run: |
          argocd login argocd.ksc036.store \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \

      - name: Sync application
        run: |
          echo "ENV_DIR is ${{ needs.gitops-update.outputs.dir }}"
          echo "=== Current app list ==="
          argocd app list
          argocd app sync argocd/${{ needs.gitops-update.outputs.dir }}-app
