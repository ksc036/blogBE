// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique // 선택적 (소셜 로그인만 쓰는 경우 optional)
  subdomain     String?   @unique    // 개인 블로그용 서브도메인 (ex: ksc036)
  bio           String?              // 자기소개 (짧은 텍스트)
  blogName      String?   @unique
  thumbnailUrl  String?              // 프로필 이미지 URL
  sub           String?      @unique
  provider      String?             // SSO 로그인 제공자 (ex: google, github 등)
  providerId    String?             // SSO에서 제공하는 고유 ID
  adsenseCode   String?             // 애드센스 코드
  role          String    @default("USER") // 기본 사용자 역할
  isDeleted     Boolean   @default(false)  // 탈퇴 여부
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt

  comments      Comment[]
  posts         Post[] 
  likes         PostLike[]   @relation("UserLikes")
  following     UserFollow[] @relation("FollowingRelation")
  followers     UserFollow[] @relation("FollowerRelation")
  postTags PostTag[] 
  reviewPlan ReviewPlan[]
  reviewInstances ReviewInstance[]
}
model UserFollow {
  id           Int      @id @default(autoincrement())
  follower     User     @relation("FollowingRelation", fields: [followerId], references: [id])
  followerId   Int
  following    User     @relation("FollowerRelation", fields: [followingId], references: [id])
  followingId  Int
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId]) // 중복 팔로우 방지
}
model Post {
  id           Int       @id @default(autoincrement())
  title        String // VARCHAR(255) 굳이 명시 안 해도 됨
  content      String
  thumbnailUrl String // URL이라면 TEXT도 무방
  desc         String // 게시글 설명, TEXT 적절
  visibility   Boolean   @default(true)
  postUrl      String // TEXT로도 충분 (유니크 조건 추가 추천)
  viewCount    Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)
  user     User @relation(fields: [userId], references: [id])
  userId   Int  @default(1)
  comments     Comment[]
  likes        PostLike[]     @relation("PostLikes")
  postTags PostTag[]
  @@unique([userId, postUrl])
  reviewInstances ReviewInstance[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  parent   Comment? @relation("CommentToReplies", fields: [parentId], references: [id])
  parentId Int? // null이면 댓글, 있으면 대댓글

  replies Comment[] @relation("CommentToReplies") // 대댓글들

  // soft delete나 상태 관리용
  isDeleted Boolean @default(false)
}

model PostLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserLikes",fields: [userId], references: [id])
  userId    Int
  post      Post     @relation("PostLikes",fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // 중복 좋아요 방지
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  canonicalTagId  Int?
  canonical       CanonicalTag?  @relation(fields: [canonicalTagId], references: [id])
  posts PostTag[]
}

model CanonicalTag {              // k8s, mysql 처럼 '묶음' 단위
  id             Int      @id @default(autoincrement())
  normalizedName String   @unique    // 예: k8s, mysql
  tags           Tag[]
}

model PostTag {
  id     Int   @id @default(autoincrement())
  userId Int
  postId Int
  tagId  Int

  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@unique([userId, postId, tagId]) // 중복 방지
}

model ReviewPlan {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  reviewDays  Json     // [1,2,4,8,23] 처럼 배열로 저장
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviewInstances ReviewInstance[]
}

model ReviewInstance {
  id             Int      @id @default(autoincrement())
  reviewPlan     ReviewPlan @relation(fields: [reviewPlanId], references: [id])
  reviewPlanId   Int
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  post           Post       @relation(fields: [postId], references: [id])
  postId         Int

  scheduledDate  DateTime  // 복습 예정일 (날짜만 쓸 수도 있고 full DateTime도 가능)
  status         ReviewStatus @default(PENDING)
  reviewedAt     DateTime?   // 실제 복습한 시간 (null이면 아직 안 함)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId, scheduledDate]) // 오늘 리뷰할 것 빠르게 찾을 때 유용
}

enum ReviewStatus {
  PENDING   // 아직 복습 안 함 (예정 상태)
  DONE      // 복습 완료 (O)
  READY   // 오늘 해야함
  MISSED    // 날짜 지났는데 안 함 (X)
}
