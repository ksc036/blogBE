// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique // 선택적 (소셜 로그인만 쓰는 경우 optional)
  subdomain     String?   @unique    // 개인 블로그용 서브도메인 (ex: ksc036)
  bio           String?              // 자기소개 (짧은 텍스트)
  blogName      String?   @unique
  thumbnailUrl  String?              // 프로필 이미지 URL
  sub           String?      @unique
  provider      String?             // SSO 로그인 제공자 (ex: google, github 등)
  providerId    String?             // SSO에서 제공하는 고유 ID
  adsenseCode   String?             // 애드센스 코드
  role          String    @default("USER") // 기본 사용자 역할
  isDeleted     Boolean   @default(false)  // 탈퇴 여부
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt

  comments      Comment[]
  posts         Post[] 
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String // VARCHAR(255) 굳이 명시 안 해도 됨
  content      String
  thumbnailUrl String // URL이라면 TEXT도 무방
  desc         String // 게시글 설명, TEXT 적절
  visibility   Boolean   @default(true)
  postUrl      String // TEXT로도 충분 (유니크 조건 추가 추천)
  viewCount    Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)
  user     User @relation(fields: [userId], references: [id])
  userId   Int  @default(1)
  comments     Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  parent   Comment? @relation("CommentToReplies", fields: [parentId], references: [id])
  parentId Int? // null이면 댓글, 있으면 대댓글

  replies Comment[] @relation("CommentToReplies") // 대댓글들

  // soft delete나 상태 관리용
  isDeleted Boolean @default(false)
}
